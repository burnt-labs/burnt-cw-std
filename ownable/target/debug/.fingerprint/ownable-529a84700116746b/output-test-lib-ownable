{"message":"expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":549,"byte_end":554,"line_start":19,"line_end":19,"column_start":126,"column_end":131,"is_primary":false,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":126,"highlight_end":131}],"label":"maybe try to close unmatched angle bracket","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":554,"byte_end":555,"line_start":19,"line_end":19,"column_start":131,"column_end":132,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":131,"highlight_end":132}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might have meant to end the type parameters here","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":554,"byte_end":554,"line_start":19,"line_end":19,"column_start":131,"column_end":131,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":131,"highlight_end":131}],"label":null,"suggested_replacement":">","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:131\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mter: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmaybe try to close unmatched angle bracket\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to end the type parameters here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC\u001b[0m\u001b[0m\u001b[38;5;10m>\u001b[0m\u001b[0m=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `=`","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":588,"byte_end":589,"line_start":19,"line_end":19,"column_start":165,"column_end":166,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":165,"highlight_end":166}],"label":"expected one of 9 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `=`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:165\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mest::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppRes\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 9 possible tokens\u001b[0m\n\n"}
{"message":"expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":958,"byte_end":963,"line_start":23,"line_end":23,"column_start":123,"column_end":128,"is_primary":false,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":123,"highlight_end":128}],"label":"maybe try to close unmatched angle bracket","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":963,"byte_end":964,"line_start":23,"line_end":23,"column_start":128,"column_end":129,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":128,"highlight_end":129}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might have meant to end the type parameters here","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":963,"byte_end":963,"line_start":23,"line_end":23,"column_start":128,"column_end":128,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":128,"highlight_end":128}],"label":null,"suggested_replacement":">","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:128\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mter: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> an\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmaybe try to close unmatched angle bracket\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to end the type parameters here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC\u001b[0m\u001b[0m\u001b[38;5;10m>\u001b[0m\u001b[0m=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                               \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `=`","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":997,"byte_end":998,"line_start":23,"line_end":23,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":162,"highlight_end":163}],"label":"expected one of 9 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `=`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:162\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mest::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where E\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 9 possible tokens\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `burnt_glue`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":249,"byte_end":259,"line_start":8,"line_end":8,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use burnt_glue::module::Module;","highlight_start":5,"highlight_end":15}],"label":"use of undeclared crate or module `burnt_glue`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `burnt_glue`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse burnt_glue::module::Module;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `burnt_glue`\u001b[0m\n\n"}
{"message":"implicit elided lifetime not allowed here","code":{"code":"E0726","explanation":"An argument lifetime was elided in an async function.\n\nErroneous code example:\n\nWhen a struct or a type is bound/declared with a lifetime it is important for\nthe Rust compiler to know, on usage, the lifespan of the type. When the\nlifetime is not explicitly mentioned and the Rust Compiler cannot determine\nthe lifetime of your type, the following error occurs.\n\n```compile_fail,E0726\nuse futures::executor::block_on;\nstruct Content<'a> {\n    title: &'a str,\n    body: &'a str,\n}\nasync fn create(content: Content) { // error: implicit elided\n                                    // lifetime not allowed here\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\nlet content = Content { title: \"Rust\", body: \"is great!\" };\nlet future = create(content);\nblock_on(future);\n```\n\nSpecify desired lifetime of parameter `content` or indicate the anonymous\nlifetime like `content: Content<'_>`. The anonymous lifetime tells the Rust\ncompiler that `content` is only needed until create function is done with\nit's execution.\n\nThe `implicit elision` meaning the omission of suggested lifetime that is\n`pub async fn create<'a>(content: Content<'a>) {}` is not allowed here as\nlifetime of the `content` can differ from current context:\n\n```ignore (needs futures dependency)\nasync fn create(content: Content<'_>) { // ok!\n    println!(\"title: {}\", content.title);\n    println!(\"body: {}\", content.body);\n}\n```\n\nKnow more about lifetime elision in this [chapter][lifetime-elision] and a\nchapter on lifetimes can be found [here][lifetimes].\n\n[lifetime-elision]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n[lifetimes]: https://doc.rust-lang.org/rust-by-example/scope/lifetime.html\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":349,"byte_end":356,"line_start":14,"line_end":14,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"impl Module for Ownable {","highlight_start":17,"highlight_end":24}],"label":"expected lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"assuming a `'static` lifetime...","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"indicate the anonymous lifetime","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":356,"byte_end":356,"line_start":14,"line_end":14,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"impl Module for Ownable {","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0726]\u001b[0m\u001b[0m\u001b[1m: implicit elided lifetime not allowed here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:14:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl Module for Ownable {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: assuming a `'static` lifetime...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: indicate the anonymous lifetime\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl Module for Ownable\u001b[0m\u001b[0m\u001b[38;5;10m<'_>\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `anyhow`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":652,"byte_end":658,"line_start":19,"line_end":19,"column_start":229,"column_end":235,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":229,"highlight_end":235}],"label":"use of undeclared crate or module `anyhow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `anyhow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:229\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mkInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + Deserializ\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `anyhow`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `anyhow`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1047,"byte_end":1053,"line_start":23,"line_end":23,"column_start":212,"column_end":218,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":212,"highlight_end":218}],"label":"use of undeclared crate or module `anyhow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `anyhow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:212\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + Deserializ\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `anyhow`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `anyhow`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1357,"byte_end":1363,"line_start":27,"line_end":27,"column_start":127,"column_end":133,"is_primary":true,"text":[{"text":"    fn query(&self, api: &dyn Api, storage: &dyn Storage, querier: &dyn Querier, block: &BlockInfo, request: Self::QueryT) -> anyhow::Result<Binary> {","highlight_start":127,"highlight_end":133}],"label":"use of undeclared crate or module `anyhow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `anyhow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:27:127\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mck: &BlockInfo, request: Self::QueryT) -> anyhow::Result<Binary> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `anyhow`\u001b[0m\n\n"}
{"message":"unused import: `CosmosRouter`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":135,"byte_end":147,"line_start":3,"line_end":3,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"use cw_multi_test::{AppResponse, CosmosRouter, Module};","highlight_start":34,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":133,"byte_end":147,"line_start":3,"line_end":3,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"use cw_multi_test::{AppResponse, CosmosRouter, Module};","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `CosmosRouter`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:3:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse cw_multi_test::{AppResponse, CosmosRouter, Module};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"consider choosing a more descriptive name","code":{"code":"clippy::just_underscores_and_digits","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":549,"byte_end":560,"line_start":19,"line_end":19,"column_start":126,"column_end":137,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":126,"highlight_end":137}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::just_underscores_and_digits)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider choosing a more descriptive name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:126\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mt dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sende\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::just_underscores_and_digits)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\u001b[0m\n\n"}
{"message":"consider choosing a more descriptive name","code":{"code":"clippy::just_underscores_and_digits","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":958,"byte_end":969,"line_start":23,"line_end":23,"column_start":123,"column_end":134,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":123,"highlight_end":134}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider choosing a more descriptive name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:123\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\u001b[0m\n\n"}
{"message":"method `execute` has 8 parameters but the declaration in trait `cw_multi_test::Module::execute` has 7","code":{"code":"E0050","explanation":"An attempted implementation of a trait method has the wrong number of function\nparameters.\n\nErroneous code example:\n\n```compile_fail,E0050\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\n// error: method `foo` has 1 parameter but the declaration in trait `Foo::foo`\n// has 2\nimpl Foo for Bar {\n    fn foo(&self) -> bool { true }\n}\n```\n\nFor example, the `Foo` trait has a method `foo` with two function parameters\n(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\nthe `u8` parameter. To fix this error, they must have the same parameters:\n\n```\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo(&self, x: u8) -> bool { // ok!\n        true\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":454,"byte_end":647,"line_start":19,"line_end":19,"column_start":31,"column_end":224,"is_primary":true,"text":[{"text":"    fn execute<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":31,"highlight_end":224}],"label":"expected 7 parameters, found 8","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`execute` from trait: `fn(&Self, &dyn cosmwasm_std::Api, &mut dyn cosmwasm_std::Storage, &dyn cw_multi_test::CosmosRouter<QueryC = QueryC, ExecC = ExecC>, &cosmwasm_std::BlockInfo, cosmwasm_std::Addr, <Self as cw_multi_test::Module>::ExecT) -> std::result::Result<cw_multi_test::AppResponse, anyhow::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0050]\u001b[0m\u001b[0m\u001b[1m: method `execute` has 8 parameters but the declaration in trait `cw_multi_test::Module::execute` has 7\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:19:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, sender: Addr, msg: Self::ExecT) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 7 parameters, found 8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `execute` from trait: `\u001b[0m\u001b[0m\u001b[1mfn(&Self, &dyn cosmwasm_std::Api, &mut dyn cosmwasm_std::Storage, &dyn cw_multi_test::CosmosRouter<QueryC = QueryC, ExecC = ExecC>, &cosmwasm_std::BlockInfo, cosmwasm_std::Addr, <Self as cw_multi_test::Module>::ExecT) -> std::result::Result<cw_multi_test::AppResponse, anyhow::Error>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"method `sudo` has 7 parameters but the declaration in trait `cw_multi_test::Module::sudo` has 6","code":{"code":"E0050","explanation":"An attempted implementation of a trait method has the wrong number of function\nparameters.\n\nErroneous code example:\n\n```compile_fail,E0050\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\n// error: method `foo` has 1 parameter but the declaration in trait `Foo::foo`\n// has 2\nimpl Foo for Bar {\n    fn foo(&self) -> bool { true }\n}\n```\n\nFor example, the `Foo` trait has a method `foo` with two function parameters\n(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\nthe `u8` parameter. To fix this error, they must have the same parameters:\n\n```\ntrait Foo {\n    fn foo(&self, x: u8) -> bool;\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo(&self, x: u8) -> bool { // ok!\n        true\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":863,"byte_end":1042,"line_start":23,"line_end":23,"column_start":28,"column_end":207,"is_primary":true,"text":[{"text":"    fn sudo<ExecC, QueryC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -> anyhow::Result<AppResponse> where ExecC: Debug + Clone + PartialEq + JsonSchema + DeserializeOwned + 'static, QueryC: CustomQuery + DeserializeOwned + 'static {","highlight_start":28,"highlight_end":207}],"label":"expected 6 parameters, found 7","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`sudo` from trait: `fn(&Self, &dyn cosmwasm_std::Api, &mut dyn cosmwasm_std::Storage, &dyn cw_multi_test::CosmosRouter<QueryC = QueryC, ExecC = ExecC>, &cosmwasm_std::BlockInfo, <Self as cw_multi_test::Module>::SudoT) -> std::result::Result<cw_multi_test::AppResponse, anyhow::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0050]\u001b[0m\u001b[0m\u001b[1m: method `sudo` has 7 parameters but the declaration in trait `cw_multi_test::Module::sudo` has 6\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0mC>(&self, api: &dyn Api, storage: &mut dyn Storage, router: &dyn CosmosRouter<cw_multi_test::app::ExecC=ExecC, cw_multi_test::app::QueryC=QueryC>, block: &BlockInfo, msg: Self::SudoT) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 parameters, found 7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `sudo` from trait: `\u001b[0m\u001b[0m\u001b[1mfn(&Self, &dyn cosmwasm_std::Api, &mut dyn cosmwasm_std::Storage, &dyn cw_multi_test::CosmosRouter<QueryC = QueryC, ExecC = ExecC>, &cosmwasm_std::BlockInfo, <Self as cw_multi_test::Module>::SudoT) -> std::result::Result<cw_multi_test::AppResponse, anyhow::Error>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 11 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 11 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0050, E0433, E0726.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0050, E0433, E0726.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0050`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0050`.\u001b[0m\n"}
